

.directive('ionProfilePicture', [
'$ionicTemplateLoader',
'$ionicBackdrop',
'$q',
'$timeout',
'$rootScope',
'$document',
function($ionicTemplateLoader, $ionicBackdrop, $q, $timeout, $rootScope, $document) {
  return {
    require: '?ngModel',
    restrict: 'E',
    template: '<div class="ion-profile-picture no-picture"><input type="file" accept="image/*" /></div>',
    replace: true,
    link: function(scope, element, attrs, ngModel) {
      var $input = angular.element(element.find('input'));
      var file;

      if(!ngModel){
        console.error('ion-profile-picture:', 'Need to set ng-model');
        return false;
      }

      // all this guy does is trigger a click event on the hidden file input
      var openFileDialog = function(e){
        $input[0].click();
      };

      // every time the file gets updated, this guy does it's thing
      var onFilePick = function(e){
        var reader = new FileReader();

        reader.onload = function(_e){
          scope.$apply(function(){
            ngModel.$setViewValue(_e.target.result);
            ngModel.$render();
          });
        };

        file = e.target.files[0];

        if(file){
          // we read the data from our selected image to get the Base64
          // and use it as our element background
          reader.readAsDataURL(file);
        }
      };

      ngModel.$formatters.unshift(function (modelValue) {
          if (!modelValue) return '';
          return modelValue;
      });

      ngModel.$parsers.unshift(function (viewValue) {
          return viewValue;
      });

      ngModel.$render = function(){
        var value = ngModel.$viewValue;

        if(!value){
          element.css({
            'background-image': 'none'
          });
          element.addClass('no-picture');
        } else {
          // if our value is just a plain Base64 string, we will try
          // to be helpful and prepend the right stuff to it
          if(!value.match(/^data:.*?;base64,/i)){
            value = 'data:image/jpg;base64,' + value;
          }

          element.css({
            'background-image': 'url(' + value + ')'
          });
          element.removeClass('no-picture');
        }
      };

      element.on('click', openFileDialog);
      $input.on('change', onFilePick);
    }
  };
}
])






var img2fire = angular.module('img2fire', ['firebase', 'angular.filter']);

img2fire.controller("base64Ctrl", function($scope, $firebaseArray) {
  
  var ref = new Firebase("https://base64images.firebaseio.com/");

  var img = new Firebase("https://base64images.firebaseio.com/images");
  $scope.imgs = $firebaseArray(img);

  var _validFileExtensions = [".jpg", ".jpeg", ".bmp", ".gif", ".png"];
  $scope.uploadFile = function() {
    var sFileName = $("#nameImg").val();
    if (sFileName.length > 0) {
      var blnValid = false;
      for (var j = 0; j < _validFileExtensions.length; j++) {
        var sCurExtension = _validFileExtensions[j];
        if (sFileName.substr(sFileName.length - sCurExtension.length, sCurExtension.length).toLowerCase() == sCurExtension.toLowerCase()) {
          blnValid = true;
          var filesSelected = document.getElementById("nameImg").files;
          if (filesSelected.length > 0) {
            var fileToLoad = filesSelected[0];

            var fileReader = new FileReader();

            fileReader.onload = function(fileLoadedEvent) {
              var textAreaFileContents = document.getElementById(
                "textAreaFileContents"
              );


              $scope.imgs.$add({
                date: Firebase.ServerValue.TIMESTAMP,
                base64: fileLoadedEvent.target.result
              });
            };

            fileReader.readAsDataURL(fileToLoad);
          }
          break;
        }
      }

      if (!blnValid) {
        alert('File is not valid');
        return false;
      }
    }

    return true;
  }

  $scope.deleteimg = function(imgid) {
    var r = confirm("Do you want to remove this image ?");
    if (r == true) {
      $scope.imgs.forEach(function(childSnapshot) {
        if (childSnapshot.$id == imgid) {
            $scope.imgs.$remove(childSnapshot).then(function(ref) {
              ref.key() === childSnapshot.$id; // true
            });
        }
      });
    }
  }

});







this.sendMail = function () {

    var data = ({
        contactName : this.contactName,
        contactEmail : this.contactEmail,
        contactMsg : this.contactMsg
    });


    opportunityName, Description, Deadline, ContactPerson, ContactEmail,Benefits

    // Simple POST request example (passing data) :
    $http.post('/contact-form', data).
        success(function(data, status, headers, config) {
            // this callback will be called asynchronously
            // when the response is available

            $mdToast.show(
                $mdToast.simple()
                    .content('Thanks for your message ' + data.contactName + ' You Rock!')
                    .position($scope.getToastPosition())
                    .hideDelay(5000)
            );

        }).
        error(function(data, status, headers, config) {
            // called asynchronously if an error occurs
            // or server returns response with an error status.
        });

};


        var app = angular.module('ion-autocomplete-sample', ['ionic', 'ion-autocomplete'])
                .controller('IonAutocompleteController', function ($scope) {

                    $scope.model = "";
                    $scope.clickedValueModel = "";
                    $scope.removedValueModel = "";

                    $scope.getTestItems = function (query) {
                        if (query) {
                            return {
                                items: [
                                    {id: "1", name: query + "1", view: "view: " + query + "1"},
                                    {id: "2", name: query + "2", view: "view: " + query + "2"},
                                    {id: "3", name: query + "3", view: "view: " + query + "3"}]
                            };
                        }
                        return {items: []};
                    };

                    $scope.itemsClicked = function (callback) {
                        $scope.clickedValueModel = callback;
                    };
                    $scope.itemsRemoved = function (callback) {
                        $scope.removedValueModel = callback;
                    };
                });


<html lang="en" ng-app="ion-autocomplete-sample">

<head>
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>ion-autocomplete example</title>

  <link rel="stylesheet" href="http://code.ionicframework.com/1.1.0/css/ionic.css">
  <link rel="stylesheet" href="https://rawgit.com/guylabs/ion-autocomplete/master/src/ion-autocomplete.css">

  <script src="http://code.ionicframework.com/1.1.0/js/ionic.bundle.min.js"></script>
  <script src="https://rawgit.com/guylabs/ion-autocomplete/master/src/ion-autocomplete.js"></script>


</head>

<body ng-controller="IonAutocompleteController">
<ion-view title="ion-autocomplete sample">
    <ion-content>
        <form>

            <label class="item item-input">
                <span class="input-label">Multiple select autocomplete</span>
                <input ion-autocomplete type="text" readonly="readonly" class="ion-autocomplete" autocomplete="off"
                       ng-model="model"
                       item-value-key="name"
                       item-view-value-key="view"
                       items-method="getTestItems(query)"
                       items-method-value-key="items"
                       placeholder="Enter test query ..."
                       items-clicked-method="itemsClicked(callback)"
                       items-removed-method="itemsRemoved(callback)"
                       max-selected-items="3"/>
            </label>

            <label class="item item-input">
                <span class="input-label">Multiple select autocomplete model value</span>
                <input type="text" class="ion-autocomplete-test-model" ng-model="model" autocomplete="off">
            </label>

            <label class="item item-input">
                <span class="input-label">Multiple select autocomplete clicked item callback model value</span>
                <input type="text" class="ion-autocomplete-clicked-model" ng-model="clickedValueModel"
                       autocomplete="off">
            </label>

            <label class="item item-input">
                <span class="input-label">Multiple select autocomplete removed item callback model value</span>
                <input type="text" class="ion-autocomplete-removed-model" ng-model="removedValueModel"
                       autocomplete="off">
            </label>

        </form>
    </ion-content>
</ion-view>
</body>

</html>

